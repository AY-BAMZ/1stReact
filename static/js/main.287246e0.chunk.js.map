{"version":3,"sources":["recipe.module.css","4.JPG","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","tit","map","text","product_image","src","alt","App","useState","recipes","setRecipies","search","setSearch","query","setQueary","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","ceoImage","placeholder","onClick","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,oBAAoB,cAAgB,8BAA8B,IAAM,sB,qBCDhID,EAAOC,QAAU,IAA0B,+B,gNCsB5BC,EAnBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,6BACI,yBAAKC,UAAWC,IAAMC,QAClB,yBAAKF,UAAWC,IAAME,KAAK,4BAAMP,IACjC,4BACKG,EAAYK,KAAI,SAAAL,GAAW,OACxB,4BAAKA,EAAYM,UAGzB,2BAAIR,GACJ,6BACI,yBAAKG,UAAWC,IAAMK,cAAeC,IAAKT,EAAOU,IAAI,S,gBC8C1DC,EAxDJ,WAET,IAFc,EAKiBC,mBAAS,IAL1B,mBAKPC,EALO,KAKEC,EALF,OAOcF,mBAAS,IAPvB,mBAOPG,EAPO,KAOCC,EAPD,OAQaJ,mBAAS,WARtB,mBAQPK,EARO,KAQAC,EARA,KAUdC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbhB,WAagB,oBAZd,qCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAYW,EAAKC,MAHA,2CAAH,qDAiBhB,OACE,yBAAKxB,UAAU,OACb,0BAAMyB,SAVQ,SAAAC,GAChBA,EAAEC,iBACFX,EAAUH,GACVC,EAAU,KAOmBd,UAAU,eACnC,2BAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOhB,EAAQiB,SAd1C,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAcf,4BAAQ7B,UAAU,gBAAgB4B,KAAK,UAAvC,YAEF,yBAAK5B,UAAU,SACdW,EAAQP,KAAI,SAAAF,GACX,OAAO,kBAAC,EAAD,CAAQN,MAAOM,EAAOA,OAAO8B,MAAOnC,SAAUK,EAAOA,OAAOL,SACnEC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,kBAGzD,yBAAKC,UAAU,UACb,yBAAKA,UAAU,YAAYO,IAAK0B,IAAUzB,IAAI,SAC9C,iDACA,qCACA,2BAAOR,UAAU,aAAa4B,KAAK,OAAOM,YAAY,gCACtD,6BACE,4BAAQC,QAAS,WApBvBC,MAAM,8BAoB+BpC,UAAU,eAAe4B,KAAK,UAA7D,YC1CUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.287246e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__21Brk\",\"img\":\"recipe_img__2WRps\",\"product_image\":\"recipe_product_image__27UkV\",\"tit\":\"recipe_tit__4pC6p\"};","module.exports = __webpack_public_path__ + \"static/media/4.5cbf6250.JPG\";","import React from 'react'\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return(\r\n        <div>\r\n            <div className={style.recipe} >\r\n                <div className={style.tit}><h1 >{title}</h1></div>\r\n                <ol>\r\n                    {ingredients.map(ingredients =>(\r\n                        <li>{ingredients.text}</li>\r\n                    ))}\r\n                </ol>\r\n                <p>{calories}</p>\r\n                <div>\r\n                    <img className={style.product_image} src={image} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\nimport ceoImage from './4.JPG'\n\nconst App= () =>{\n\n  const APP_ID ='b1c96d6d'\n  const APP_KEY = 'e81a56a581145adeaf22afa39a47bf4a'\n\n  const [recipes, setRecipies] = useState([]);\n\n  const [search, setSearch] = useState('');\n  const [query, setQueary] = useState('chicken');\n\n  useEffect(()=>{\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async ()=>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipies(data.hits);\n  }\n\n  const updateSearch = e =>{\n    setSearch(e.target.value); \n  }\n  const getSearch = e =>{\n    e.preventDefault();\n    setQueary(search)\n    setSearch('')\n  }\n  function booni(){\n    alert('thanks for greeting us oo')\n  }\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className='search-form'>\n        <input className='search-bar' type='text' value={search} onChange={updateSearch}/>\n        <button className='search-button' type='submit'>search </button>\n      </form>\n      <div className=\"boddy\">\n      {recipes.map(recipe=>{\n        return <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} \n        image={recipe.recipe.image} ingredients={recipe.recipe.ingredients} />  \n        })}\n      </div>\n      <div className=\"footer\">\n        <img className=\"ceo_Image\" src={ceoImage} alt=\"#LLL\" />\n        <h1>ENGR AYOBAMI PAUL</h1>\n        <h3>C.E.O</h3>\n        <input className=\"greet_bamz\" type=\"text\" placeholder=\"send your greetings to bamz\" />\n        <div>        \n          <button onClick={()=> booni()} className=\"greet_button\" type=\"submit\">SEND</button>\n         </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}